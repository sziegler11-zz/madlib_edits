/* -----------------------------------------------------------------------------
 * Test Linear Support Vector Machine
 * -------------------------------------------------------------------------- */

SELECT svm_generate_cls_data('svm_train_data', 1000, 4);
SELECT svm_generate_cls_data('svm_test_data', 1000, 4);

-- Example usage for LINEAR classification, replace the above by
SELECT * FROM lsvm_classification('svm_train_data', 'lclss', false);
DROP TABLE IF EXISTS svm_test_predict CASCADE;
SELECT lsvm_predict_batch('svm_test_data', 'ind', 'id', 'lclss', 'svm_test_predict', false);

-- checking correctness with pre-conditioning
DROP TABLE IF EXISTS svm_normalized CASCADE;
CREATE TABLE svm_normalized AS
SELECT
    id,
    array_append(array_div(array_sub(ind, ind_avg), ind_stddev), 1::FLOAT8) AS ind,
    label
FROM svm_train_data,
    (
        SELECT ARRAY[avg(ind[1]),avg(ind[2]),
            avg(ind[3]),avg(ind[4])] AS ind_avg
        FROM svm_train_data
    ) AS svm_ind_avg,
    (
        SELECT ARRAY[stddev(ind[1]),stddev(ind[2]),
            stddev(ind[3]),stddev(ind[4])] AS ind_stddev
        FROM svm_train_data
    ) AS svm_ind_stddev
ORDER BY random();

DROP TABLE IF EXISTS svm_test_normalized CASCADE;
CREATE TABLE svm_test_normalized AS
SELECT
    id,
    array_append(array_div(array_sub(ind, ind_avg), ind_stddev), 1::FLOAT8) AS ind,
    label
FROM svm_test_data,
    (
        SELECT ARRAY[avg(ind[1]),avg(ind[2]),
            avg(ind[3]),avg(ind[4])] AS ind_avg
        FROM svm_test_data
    ) AS svm_test_ind_avg,
    (
        SELECT ARRAY[stddev(ind[1]),stddev(ind[2]),
            stddev(ind[3]),stddev(ind[4])] AS ind_stddev
        FROM svm_test_data
    ) AS svm_test_ind_stddev;

----------------------------------------------------------------
-- serial
-- learning
DROP TABLE IF EXISTS lsvm_model CASCADE;
SELECT lsvm_classification('svm_normalized', 'lsvm_model', false, true, 0.03, 0, 5);
\x on
SELECT * FROM lsvm_model;
\x off

-- l2
DROP TABLE IF EXISTS lsvm_model_small_norm2 CASCADE;
SELECT lsvm_classification('svm_normalized', 'lsvm_model_small_norm2', false, false, 0.03, 1, 5, 1, FALSE);
\x on
SELECT * FROM lsvm_model_small_norm2;
\x off

SELECT
    assert(
        norm2(l2.weights) < norm2(noreg.weights),
        'l2 regularization should produce weights with smaller l2 norm!')
FROM lsvm_model AS noreg, lsvm_model_small_norm2 AS l2;


-- l1 makes sprase models
DROP TABLE IF EXISTS lsvm_model_very_sparse CASCADE;
SELECT lsvm_classification('svm_normalized', 'lsvm_model_very_sparse', false, false, 0.03, 1, 5, 1, FALSE);
\x on
SELECT * FROM lsvm_model_very_sparse;
\x off
SELECT
    assert(
        count(*) > 0,
        'The model is supposed to be sparse with reg=1')
FROM
(
    SELECT unnest(weights) AS w_i FROM lsvm_model_very_sparse
) subq
WHERE w_i != 0;

-- predicting
DROP TABLE IF EXISTS svm_test_predict CASCADE;
SELECT lsvm_predict_batch('svm_test_normalized', 'ind', 'id', 'lsvm_model', 'svm_test_predict');

-- verifying
SELECT
    count(*) AS misclassification_count_serial,
    assert(count(*) <= 200,
        'Linear Support Vector Machine using incremental gradient: test error '
        || count(*) || ' is too high (> 200 out of 1000). Wrong result.')
FROM svm_test_predict NATURAL JOIN svm_test_normalized
WHERE prediction <> label;

----------------------------------------------------------------
-- parallel
-- learning
DROP TABLE IF EXISTS lsvm_model CASCADE;
SELECT lsvm_classification('svm_normalized', 'lsvm_model', true, true, 0.03, 0.001, 5, 0.9);
SELECT norm_of_gradient FROM lsvm_model;

-- predicting
DROP TABLE IF EXISTS svm_test_predict CASCADE;
CREATE TABLE svm_test_predict AS
SELECT
    svm_test_normalized.id,
    lsvm_predict(weights, ind) AS prediction,
    label
FROM svm_test_normalized, lsvm_model;

-- stats for info
SELECT count(*) AS misclassification_count_parallel
FROM svm_test_predict
WHERE prediction <> label;
