
SELECT svm_generate_cls_data('svm_train_data', 1000, 4);
SELECT svm_generate_cls_data('svm_test_data', 1000, 4);

-- Example usage for LINEAR classification, replace the above by
SELECT * FROM lsvm_classification('svm_train_data', 'lclss', false);
DROP TABLE IF EXISTS svm_test_predict CASCADE;
SELECT lsvm_predict_batch('svm_test_data', 'ind', 'id', 'lclss', 'svm_test_predict', false);

-- checking correctness with pre-conditioning
DROP TABLE IF EXISTS svm_normalized CASCADE;
CREATE TABLE svm_normalized AS
SELECT
    id,
    array_append(array_div(array_sub(ind, ind_avg), ind_stddev), 1::FLOAT8) AS ind,
    label
FROM svm_train_data,
    (
        SELECT ARRAY[avg(ind[1]),avg(ind[2]),
            avg(ind[3]),avg(ind[4])] AS ind_avg
        FROM svm_train_data
    ) AS svm_ind_avg,
    (
        SELECT ARRAY[stddev(ind[1]),stddev(ind[2]),
            stddev(ind[3]),stddev(ind[4])] AS ind_stddev
        FROM svm_train_data
    ) AS svm_ind_stddev
ORDER BY random();

DROP TABLE IF EXISTS svm_test_normalized CASCADE;
CREATE TABLE svm_test_normalized AS
SELECT
    id,
    array_append(array_div(array_sub(ind, ind_avg), ind_stddev), 1::FLOAT8) AS ind,
    label
FROM svm_test_data,
    (
        SELECT ARRAY[avg(ind[1]),avg(ind[2]),
            avg(ind[3]),avg(ind[4])] AS ind_avg
        FROM svm_test_data
    ) AS svm_test_ind_avg,
    (
        SELECT ARRAY[stddev(ind[1]),stddev(ind[2]),
            stddev(ind[3]),stddev(ind[4])] AS ind_stddev
        FROM svm_test_data
    ) AS svm_test_ind_stddev;

----------------------------------------------------------------
-- serial
-- learning
DROP TABLE IF EXISTS lsvm_model, lsvm_model_summary CASCADE;
SELECT lsvm_classification('svm_normalized', 'lsvm_model', false, true, 0.03, 0, 5);

-- Export to PMML

SELECT pmml('lsvm_model');
